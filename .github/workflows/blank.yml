# This is a basic workflow to help you get started with Actions

name: CI/CD pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
    tags:
      - 'v*'
#  pull_request:
#    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  IMAGE_NAME: wisebeard/docker_app-custom

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push image with latest tag
        uses: docker/build-push-action@v5
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:latest

      - name: Build and push image with tag
        uses: docker/build-push-action@v5
        if: startsWith(github.ref, 'refs/tags/')
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.ref_name }}
  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Extract tag or branch
        id: extract
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          else
            echo "TAG_NAME=latest" >> $GITHUB_ENV
          fi
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.BASTION_SSH_KEY }}

      - name: Run kubectl set image on bastion
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.BASTION_USER }}@${{ secrets.BASTION_HOST }} "
            kubectl set image deployment/docker-app docker-app-container=${{ env.IMAGE_NAME }}:${{ env.TAG_NAME }} 
          "
